#!/usr/bin/env ruby
# frozen_string_literal: true

require 'rubygems'
require 'commander/import'
require 'fileutils'
require 'pry'

program :name, 'esm'
program :version, '0.0.1'
program :description, 'CLI utility to build @ESM'

command :build do |c|
  c.syntax = 'esm build [options]'
  c.summary = ''
  c.description = ''
  c.example 'description', 'command example'
  c.option '--use-x64', 'Build the x64 version of the extension'
  c.action do |args, options|
    # Set some build flags
    Utils.flags(os: :windows, arch: options.use_x64 ? :x64 : :x86, env: :debug)

    # Kill Arma server
    Utils.kill_arma_server

    # Clean up the build and destination directories
    Utils.clean_directories

    # Compile and copy over the DLL into the @ESM mod locally
    Utils.build_and_copy_extension

    # Build the addons
    Utils.build_addons
  end
end

command :run do |c|
  c.syntax = 'esm run [options]'
  c.summary = ''
  c.description = ''
  c.example 'description', 'command example'
  c.option '--use-x64', 'Build the x64 version of the extension and start the x64 version of the server'
  c.action do |args, options|
    # Set some build flags
    Utils.flags(os: :windows, arch: options.use_x64 ? :x64 : :x86, env: :debug)

    # Check for required stuff
    next say("Server path is missing, please set it using `ESM_SERVER_PATH` environment variable") if Utils::SERVER_DIRECTORY.empty?
    next say("Deployment path is missing, please set it using `ESM_SERVER_PATH` environment variable") if Utils.deployment_directory.empty?

    # Kill Arma server
    Utils.kill_arma_server

    # Clean up the build and destination directories
    Utils.clean_directories

    # Compile and copy over the DLL into the @ESM mod locally
    Utils.build_and_copy_extension

    # Build and copy the mod to destination
    Utils.build_and_copy_mod

    # Start the server
    Utils.start_server

    # Pull up the logs
    Utils.open_logs
  end
end

class Utils
  GIT_DIRECTORY = File.expand_path("./")
  BUILD_DIRECTORY = "#{GIT_DIRECTORY}/target/arma"
  SERVER_DIRECTORY = ENV["ESM_SERVER_PATH"] || ""
  ADDONS = [
    "exile_server_manager",
    "exile_server_overwrites",
    "exile_server_xm8",
    "exile_server_hacking",
    "exile_server_grinding",
    "exile_server_charge_plant_started",
    "exile_server_flag_steal_started",
    "exile_server_player_connected"
  ].freeze

  TARGETS = {
    windows: {
      x86: "i686-pc-windows-msvc",
      x64: "x86_64-pc-windows-msvc"
    }
  }.freeze

  def self.flags(os:, arch:, env:)
    @os = os
    @arch = arch
    @env = env
  end

  def self.deployment_directory
    @deployment_directory ||= lambda do
      path = ENV["ESM_DEPLOYMENT_PATH"] || ""
      return "" if path.empty?

      if @arch == :x64
        path + "_x64"
      else
        path
      end
    end.call
  end

  def self.target
    @target ||= TARGETS[@os][@arch]
  end

  def self.kill_arma_server
    `taskkill /IM "arma3server.exe" /F`
    `taskkill /IM "arma3server_x64.exe" /F`
  end

  def self.clean_directories
    # Remove the @ESM in target/arma
    if File.directory?("#{BUILD_DIRECTORY}/@ESM")
      FileUtils.remove_dir("#{BUILD_DIRECTORY}/@ESM")
    end

    # Recreate the directory
    FileUtils.mkdir_p("#{BUILD_DIRECTORY}/@ESM")

    # Copy the @ESM into target/arma (Except addons)
    FileUtils.cp_r("#{GIT_DIRECTORY}/@ESM", BUILD_DIRECTORY)
    FileUtils.remove_dir("#{BUILD_DIRECTORY}/@ESM/addons")

    # Create the addons folder in target/arma/@ESM
    FileUtils.mkdir_p("#{BUILD_DIRECTORY}/@ESM/addons")
  end

  def self.build_and_copy_extension
    build_extension
    copy_extension
  end

  # This is Windows only for now...
  def self.build_extension
    command = "rustup run stable-#{target} cargo build --target #{target}"
    command += " --release" if @env == :release

    `#{command}`
  end

  def self.copy_extension
    path =
      if @os == :windows
        "#{GIT_DIRECTORY}/target/#{target}/#{@env}/esm.dll"
      else
        "#{GIT_DIRECTORY}/target/#{target}/#{@env}/esm.so"
      end

    if @arch == :x64 && @os == :windows
      filename = @arch == :x64 ? "esm_x64.dll" : "esm.dll"
      FileUtils.move(path, "#{BUILD_DIRECTORY}/@ESM/#{filename}")
    else
      FileUtils.cp_r(path, "#{BUILD_DIRECTORY}/@ESM")
    end
  end

  def self.build_and_copy_mod
    build_addons
    copy_mod
  end

  def self.build_addons
    ADDONS.each do |addon|
      `MakePBO.exe -NUP -@=#{addon} "#{GIT_DIRECTORY}/@ESM/addons/#{addon}" "#{BUILD_DIRECTORY}/@ESM/addons/#{addon}"`
    end
  end

  def self.copy_mod
    # Remove the @ESM mod in the destination
    FileUtils.remove_dir("#{deployment_directory}/@ESM")
    FileUtils.cp_r("#{BUILD_DIRECTORY}/@ESM", "#{deployment_directory}/@ESM")
  end

  def self.start_server
    if @arch == :x64
      `cd #{SERVER_DIRECTORY} && Deploy_ESM_x64.bat`
    else
      `cd #{SERVER_DIRECTORY} && Deploy_ESM.bat`
    end
  end

  def self.open_logs
    path = "#{SERVER_DIRECTORY}/ArmAServer/@ESM/log/esm.log"
    25.times do
      next sleep(1) if !File.exist?(path)

      return `code #{path}`
    end

    puts "Failed to open ESM.log"
  end
end
